package com.example.accessingdatamysql;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.CrossOrigin;

@Controller // This means that this class is a Controller
// @RequestMapping(path="/voting") // This means URL's start with /voting (after
// Application path)
@CrossOrigin(origins = { "http://localhost:8080", "http://localhost:3000" })
public class MainController {
	@Autowired // This means to get the bean called userRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private VotingRepository votingRepository;
	@Autowired
	private VoteRepository voteRepository;

	@PostMapping(path = "/voting/add") // Map ONLY POST Requests
	public @ResponseBody String addNewVoting(@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Voting v = new Voting();
		v.setName(name);
		votingRepository.save(v);
		return "Saved";
	}

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser(@RequestParam String name, @RequestParam String email) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/user/getAll")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@PostMapping(path = "/login")
	// public @ResponseBody Iterable<User> getAllUsers() {
	public @ResponseBody Optional<User> login(@RequestParam Integer userId) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		return userRepository.findById(userId);
	}

	@GetMapping(path="/voting/getAll")
	public @ResponseBody Iterable<Voting> getAllVotings() {
		// This returns a JSON or XML with the votings
		return votingRepository.findAll();
	}

	@PostMapping(path="/vote/add")
	public @ResponseBody String setVote (@RequestParam Integer userId, @RequestParam Integer votingId, @RequestParam String description) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Vote v = new Vote();
		v.setUserId(userId);
		v.setVotingId(votingId);
		v.setDescription(description);
		voteRepository.save(v);
		return "Voted";
	}
}
